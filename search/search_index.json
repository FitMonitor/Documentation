{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"documentation/api/","title":"API Documentation","text":""},{"location":"documentation/api/#gym-endpoints","title":"Gym Endpoints","text":""},{"location":"documentation/api/#get-apigyms","title":"GET <code>/api/gyms</code>","text":"<p>Retrieves a gym by its ID.</p> <p>Parameters: - id: ID of the gym to retrieve (passed as a query parameter).</p> <p>Responses: - 200 OK: Gym found and returned successfully. - 404 Not Found: No gym found for the provided ID.</p>"},{"location":"documentation/api/#get-apigymsoccupancy","title":"GET <code>/api/gyms/occupancy</code>","text":"<p>Retrieves the current occupancy of a gym by its ID.</p> <p>Parameters: - id: ID of the gym to retrieve occupancy information for (passed as a query parameter).</p> <p>Responses: - 200 OK: Gym occupancy retrieved successfully. - 404 Not Found: No gym found for the provided ID.</p>"},{"location":"documentation/api/#qr-code-endpoints","title":"QR Code Endpoints","text":""},{"location":"documentation/api/#post-apiqrcodevalidate","title":"POST <code>/api/qrcode/validate</code>","text":"<p>Validates a QR Code token.</p> <p>Request Body: - qrToken: The QR Code token to validate (as a JSON key-value pair).</p> <p>Responses: - 200 OK: QR Code token is valid, returns user details (<code>username</code>, <code>roles</code>, <code>expiration</code>). - 401 Unauthorized: Invalid or expired QR Code token.</p>"},{"location":"documentation/api/#post-apiqrcodegenerate","title":"POST <code>/api/qrcode/generate</code>","text":"<p>Generates a QR Code for the provided token.</p> <p>Request Body: - token: The token to encode in the QR Code (as a JSON key-value pair).</p> <p>Responses: - 200 OK: QR Code generated and returned as a PNG image. - 401 Unauthorized: Invalid or expired token.</p>"},{"location":"documentation/api/#post-apiqrcodegenerate-machine","title":"POST <code>/api/qrcode/generate-machine</code>","text":"<p>Generates a QR Code for a machine by its ID.</p> <p>Request Body: - machineId: The ID of the machine to generate a QR Code for (as a JSON key-value pair).</p> <p>Responses: - 200 OK: Machine QR Code generated and returned as a PNG image. - 400 Bad Request: Invalid request (e.g., <code>machineId</code> is null or empty). - 500 Internal Server Error: Failed to generate QR Code.</p>"},{"location":"documentation/api/#post-apiqrmachine","title":"POST <code>/api/qr/machine</code>","text":"<p>Changes the state of a machine.</p> <p>Request Body: - machineId: The ID of the machine to operate on. - intention: The desired state change for the machine.</p> <p>Authentication: Requires the authenticated user's <code>usersub</code>.</p> <p>Responses: - 200 OK:   - \"True\": The machine state changed successfully.   - \"User not in gym\": The user is not currently in the gym.   - \"User already using a machine\": The user is already using another machine.   - \"False\": The state change was unsuccessful.</p>"},{"location":"documentation/api/#post-apiqrgym_entrance","title":"POST <code>/api/qr/gym_entrance</code>","text":"<p>Processes a gym entrance request.</p> <p>Request Body: - token: The token to validate and process the gym entrance.</p> <p>Authentication: Requires the authenticated user's <code>usersub</code>.</p> <p>Responses: - 200 OK:   - \"Left\": User successfully left the gym.   - \"Full\": The gym is at maximum capacity.   - \"Entered\": User successfully entered the gym.</p>"},{"location":"documentation/api/#payment-endpoints","title":"Payment Endpoints","text":""},{"location":"documentation/api/#post-apipaymentcreate-checkout-session","title":"POST <code>/api/payment/create-checkout-session</code>","text":"<p>Creates a checkout session.</p> <p>Request Body: - amount: The amount to be paid (in smallest currency units). - currency: The currency for the payment (e.g., <code>usd</code>). - successUrl: The URL to redirect the user upon successful payment. - cancelUrl: The URL to redirect the user upon payment cancellation.</p> <p>Authentication: Requires the authenticated user's <code>usersub</code>.</p> <p>Responses: - 200 OK: Checkout session created successfully, returns the session URL. - 400 Bad Request: Error creating the checkout session.</p>"},{"location":"documentation/api/#get-apipaymentusersubscriptiondate","title":"GET <code>/api/payment/user/subscriptiondate</code>","text":"<p>Retrieves the subscription date of the user.</p> <p>Authentication: Requires the authenticated user's <code>usersub</code>.</p> <p>Responses: - 200 OK: Subscription date retrieved successfully. - 404 Not Found: No subscription found for the user.</p>"},{"location":"documentation/api/#webhook-endpoints","title":"Webhook Endpoints","text":""},{"location":"documentation/api/#post-apiwebhooks","title":"POST <code>/api/webhooks</code>","text":"<p>Handles Stripe webhook events.</p> <p>Request Body: - payload: The payload of the Stripe event. - Stripe-Signature: The Stripe signature header.</p> <p>Responses: - 200 OK: Webhook event handled successfully. - 400 Bad Request: Error handling the webhook event.</p> <p>Event Types Handled: - checkout.session.completed: Handles successful payment sessions.</p>"},{"location":"documentation/api/#service-methods","title":"Service Methods","text":""},{"location":"documentation/api/#gymservice","title":"GymService","text":""},{"location":"documentation/api/#creategymstring-gymname-int-capacity","title":"createGym(String gymName, int capacity)","text":"<p>Creates a new gym.</p> <p>Parameters: - gymName: The name of the gym to create. - capacity: The maximum capacity of the gym.</p>"},{"location":"documentation/api/#getgymbyidlong-id","title":"getGymByID(Long id)","text":"<p>Retrieves a gym by its ID.</p> <p>Parameters: - id: The ID of the gym to retrieve.</p>"},{"location":"documentation/api/#getoccupancylong-gymid","title":"getOccupancy(Long gymId)","text":"<p>Retrieves the current occupancy of a gym.</p> <p>Parameters: - gymId: The ID of the gym.</p>"},{"location":"documentation/api/#qrcodeservice","title":"QRCodeService","text":""},{"location":"documentation/api/#generateqrcodestring-content-int-width-int-height","title":"generateQRCode(String content, int width, int height)","text":"<p>Generates a QR Code image for the provided content.</p> <p>Parameters: - content: The content to encode in the QR Code. - width: The width of the QR Code image. - height: The height of the QR Code image.</p>"},{"location":"documentation/api/#paymentsservice","title":"PaymentsService","text":""},{"location":"documentation/api/#getpaymentstring-usersub","title":"getPayment(String userSub)","text":"<p>Retrieves the payment record for a user.</p> <p>Parameters: - userSub: The unique identifier of the user.</p>"},{"location":"documentation/api/#savepaymentpayments-payment","title":"savePayment(Payments payment)","text":"<p>Saves a new payment record.</p> <p>Parameters: - payment: The payment object to save.</p>"},{"location":"documentation/api/#updatepaymentstring-usersub-date-subscriptiondate","title":"updatePayment(String userSub, Date subscriptionDate)","text":"<p>Updates a payment record with a new subscription date.</p> <p>Parameters: - userSub: The unique identifier of the user. - subscriptionDate: The new subscription date.</p>"},{"location":"documentation/api/#stripeservice","title":"StripeService","text":""},{"location":"documentation/api/#createcheckoutsessionlong-amount-string-currency-string-successurl-string-cancelurl-string-usersub","title":"createCheckoutSession(Long amount, String currency, String successUrl, String cancelUrl, String userSub)","text":"<p>Creates a Stripe checkout session.</p> <p>Parameters: - amount: The payment amount. - currency: The payment currency. - successUrl: The success redirect URL. - cancelUrl: The cancel redirect URL. - userSub: The user's identifier.</p>"},{"location":"documentation/api/#stripewebhookservice","title":"StripeWebhookService","text":""},{"location":"documentation/api/#handlepaymentsucceededeventstring-event","title":"handlePaymentSucceededEvent(String event)","text":"<p>Processes a successful payment event.</p> <p>Parameters: - event: The JSON string representing the Stripe event.</p>"},{"location":"documentation/api/#increasesubscriptionstring-usersub-int-days","title":"increaseSubscription(String userSub, int days)","text":"<p>Increases the user's subscription by a number of days.</p> <p>Parameters: - userSub: The user's identifier. - days: The number of days to add.</p>"},{"location":"documentation/api/#getsubscriptiondaysbyamountstring-amount","title":"getSubscriptionDaysByAmount(String amount)","text":"<p>Determines the number of subscription days based on the payment amount.</p> <p>Parameters: - amount: The payment amount.</p>"},{"location":"documentation/architecture/","title":"Architecture","text":""},{"location":"documentation/architecture/#microservices-architecture","title":"Microservices Architecture","text":"<p>This diagram illustrates the architecture of our microservices, external services, and an API gateway. Below is a detailed breakdown of its components:</p>"},{"location":"documentation/architecture/#external-services","title":"External Services","text":"<ul> <li>AWS Cognito: Used for user authentication and identity management, ensuring secure access to the platform.</li> <li>Stripe: Integrated to manage gym membership payments seamlessly.</li> </ul>"},{"location":"documentation/architecture/#user-interface","title":"User Interface","text":"<ul> <li>The frontend application is where users interact with the system.</li> <li>It communicates with the backend through the API Gateway, which acts as the intermediary between the user interface and microservices.</li> </ul>"},{"location":"documentation/architecture/#microservices","title":"Microservices","text":"<ol> <li> <p>Gym Management: Manages functionalities related to gym operations, including membership management and gym attendance tracking.</p> </li> <li> <p>QR-Code Management: Handles QR code operations such as generating unique codes for users and scanning them for authentication or tracking purposes.</p> </li> <li> <p>Payments: Processes payment-related tasks and interacts with Stripe for secure transaction handling.</p> </li> </ol>"},{"location":"documentation/architecture/#message-queue","title":"Message Queue","text":"<ul> <li>Microservices communicate asynchronously using a shared Message Queue.</li> <li>Apache Kafka is used to facilitate reliable communication, ensuring that data flows efficiently between microservices like Gym Management and QR-Code Management.</li> </ul>"},{"location":"documentation/architecture/#database","title":"Database","text":"<p>A centralized MySQL Database is used to store essential application data, such as:</p> <ul> <li>User information</li> <li>QR code details</li> <li>Payment records</li> <li>Other related resources</li> </ul> <p>This database ensures data consistency and simplifies management across all microservices.</p>"},{"location":"documentation/architecture/#aws-cloud-deployment-architecture","title":"AWS Cloud Deployment Architecture","text":"<p>This deployment is designed to ensure scalability, security, and high availability for a the FIT Monitor APP. The architecture leverages multiple AWS services to provide a reliable and efficient environment. Below is a detailed description of the components and their roles:</p>"},{"location":"documentation/architecture/#aws-cloud-and-region","title":"AWS Cloud and Region","text":"<ul> <li>The deployment is hosted within an AWS Region, ensuring that all resources are centralized to minimize latency and optimize performance. The entire infrastructure resides within a Virtual Private Cloud (VPC) configured for isolation and security.</li> </ul>"},{"location":"documentation/architecture/#virtual-private-cloud-vpc","title":"Virtual Private Cloud (VPC)","text":"<ul> <li>A dedicated VPC isolates the deployment in a secure network environment. The VPC is divided into public and private subnets, distributed across two availability zones to provide resilience and fault tolerance.</li> </ul>"},{"location":"documentation/architecture/#availability-zones","title":"Availability Zones","text":"<ul> <li>The architecture operates across two availability zones, each containing public and private subnets. This ensures high availability and redundancy, minimizing the impact of failures in a single zone.</li> </ul>"},{"location":"documentation/architecture/#public-subnets","title":"Public Subnets","text":"<p>The public subnets in each availability zone include:</p> <ul> <li>Internet Gateway (IGW): Connects the VPC to the public internet, enabling external communication for the application.  </li> <li>NAT Gateways: Allow instances in private subnets to securely access the internet for updates or external communications without exposing them to the public.</li> </ul>"},{"location":"documentation/architecture/#private-subnets","title":"Private Subnets","text":"<p>The private subnets host the core application services:</p>"},{"location":"documentation/architecture/#ecs-containers","title":"ECS Containers","text":"<p>Using AWS Elastic Container Service (ECS), containers are deployed for the following application modules:</p> <ul> <li>Payments</li> <li>QR Code Management</li> <li>Gym Management</li> <li>Frontend with NGinx</li> </ul> <p>Both the frontend (Angular) and backend (Spring Boot API) are containerized and run on ECS.</p>"},{"location":"documentation/architecture/#database-rds","title":"Database (RDS)","text":"<ul> <li>The Amazon RDS (MySQL) relational database is deployed in the private subnets to securely store critical application data.</li> </ul>"},{"location":"documentation/architecture/#lambda-functions","title":"Lambda Functions","text":"<ul> <li>3 AWS Lambda functions are used. One for atomatically assigning a \"User\" role using \"cognito:groups\" claim of cognito token, another for listing all the users in the user pool and the last one for changing the role of a user. The last two functions are only accessible by the admin. </li> </ul>"},{"location":"documentation/architecture/#s3-bucket","title":"S3 Bucket","text":"<ul> <li>An S3 bucket is connected to the backend (Gym Management API) and is used to store images of gym machines. When a machine is created by an admin, its image is uploaded and stored in the bucket.</li> </ul>"},{"location":"documentation/architecture/#load-balancers","title":"Load Balancers","text":"<p>Web Application Load Balancer (Web ALB):</p> <ul> <li>Manages incoming traffic and distributes requests to ECS containers in private subnets.</li> </ul> <p></p> <p>Internal Application Load Balancer (Internal ALB):</p> <ul> <li>Facilitates secure communication between microservices within the private network. This ALB is connected to all microservices.</li> </ul>"},{"location":"documentation/architecture/#_1","title":"Architecture","text":""},{"location":"documentation/architecture/#vpc-link","title":"VPC Link","text":"<ul> <li>A VPC Link connects the private subnets to the API Gateway, ensuring secure and efficient communication between internal resources and external clients.</li> </ul>"},{"location":"documentation/architecture/#api-gateway","title":"API Gateway","text":"<p>The API Gateway serves as the primary entry point for external clients and provides:</p> <ul> <li>Authentication and Authorization using AWS Cognito.  </li> <li>Role Management to control user access to specific features and resources.  </li> <li>User Management, including account creation, permissions, and session handling.</li> </ul>"},{"location":"documentation/architecture/#_2","title":"Architecture","text":""},{"location":"documentation/architecture/#microservices-communication","title":"Microservices Communication","text":"<ul> <li>The architecture leverages Amazon MSK (Managed Streaming for Apache Kafka) to ensure efficient and reliable communication between microservices.</li> </ul>"},{"location":"documentation/architecture/#_3","title":"Architecture","text":""},{"location":"documentation/architecture/#monitoring","title":"Monitoring","text":"<ul> <li>AWS CloudWatch is used to monitor logs and service metrics, providing visibility and ensuring quick incident response.</li> </ul>"},{"location":"documentation/ci/","title":"Continuous Integration","text":"<p>In our development process, continuous integration (CI) helps streamline code integration, testing, and quality analysis. Our CI pipeline automates various tasks to ensure code reliability, efficiency, and maintainability. This page provides an overview of our CI setup and its key components, including automated testing and code analysis, specifically implemented in our build.yml configuration.</p> <p></p> <p>With this build.yml file in place on GitHub Actions, the CI pipeline is triggered automatically on every commit or pull request to the dev or main branches.</p>"},{"location":"documentation/ci/#automated-tests","title":"Automated tests","text":"<p>Testing is a critical part of our CI process. The build.yml file includes a job that runs unit and integration tests, ensuring that the code works as expected with every change. This step is vital for:</p> <ul> <li>Preventing Bugs: Running tests for each integration helps catch issues before they reach production.</li> <li>Code Reliability: Ensures that new features or fixes do not introduce breaking changes.</li> </ul>"},{"location":"documentation/ci/#sonar-cloud-analysis","title":"Sonar Cloud Analysis","text":"<p>SonarCloud is integrated into our pipeline to analyze code quality and provide detailed insights into potential issues, technical debt, and code vulnerabilities. This analysis ensures that our codebase remains maintainable, secure, and aligned with coding standards.</p> <p>In SonarCloud, in addition to the default Sonar Quality Gate, we created a customized Quality Gate tailored to better address the specific needs of certain repositories.</p> <p></p> <p></p>"},{"location":"documentation/ci/#pull-request","title":"Pull Request","text":"<p>As outlined in the Definition of Done, any completed task must undergo a peer review before being merged into the dev branch. To facilitate this process, we utilized pull requests, ensuring that the code met quality standards, passed all required tests, and was functioning as intended. This practice not only promoted collaboration and accountability but also helped identify potential issues early, improving overall code quality and maintaining the stability of the development branch.</p> <p></p> <p></p>"},{"location":"documentation/dod/","title":"Definition of Done(DoD)","text":"<p>The Definition of Done (DoD) outlines the criteria that must be met for a task to be considered complete. It ensures that all contributions to the Fit Monitor App meet a consistent standard of quality and completeness. Below is our Definition of Done:</p> <ol> <li>Functionality Implemented: The code must implement the desired functionality as described in the task or user story.</li> <li>Documentation Updated: Any relevant documentation (such as user manuals, API documentation, or technical notes) has been updated to reflect the changes made</li> <li>Code Reviewed: The code must undergo a review by at least one other team member to ensure quality, readability, and adherence to coding standards.</li> <li>Testing Completed: The feature has been thoroughly tested, including the implementation of unit tests, to ensure it fully meets the acceptance criteria.</li> </ol>"},{"location":"documentation/dor/","title":"Definition of Ready(DoR)","text":"<p>The Definition of Ready (DoR) is a set of criteria used in Agile project management and development, particularly within Scrum, to determine whether a user story or task is well-prepared and suitable for inclusion in an upcoming sprint or iteration.Below is our Definition of Ready:</p> <ol> <li>Clear Requirements: The user story must have clear and detailed acceptance criteria that describe what needs to be achieved</li> <li>Estimable: The development team should be able to estimate the effort required to complete the task</li> <li>Dependencies Identified: Any dependencies on other tasks or resources should be identified and addressed4</li> <li>Prioritized: The user story should be prioritized in the product backlog, indicating its importance relative to others</li> <li>Testable: There should be a clear understanding of how the feature will be tested, including any necessary test cases</li> </ol>"},{"location":"documentation/dor/#story-points-estimation","title":"Story Points Estimation","text":"<p>Story points serve as a metric to assess the effort required to complete a user story in our product backlog. To better organize the work to be performed, before each sprint, we evaluate our stories and the estimated effort for each one.</p> Story Points Effort Required Complexity Risk and Uncertainties 1 Low Low Low 2 Medium-Low Low Medium-Low 3 Medium Medium Medium 5 Medium-High Medium-High High 8 High High High 13 Very High High Medium-High 21 Extremely High Very High Extremely High"},{"location":"documentation/introduction/","title":"About the Project","text":"<p>This project was developed as a part of a gym management platform, aimed at improving the overall experience for both gym members and gym administrators. The main problem addressed by this platform is the inefficient management of gym memberships, machine usage, and payment processes. Traditionally, gyms face challenges in tracking member activity, managing memberships and payments manually, and ensuring that the equipment is being utilized effectively.</p>"},{"location":"documentation/introduction/#the-problem","title":"The Problem","text":"<p>In many gyms, the process of managing memberships, monitoring the availability of machines, and processing payments is still done manually or through disconnected systems. This leads to inefficiencies, errors in tracking, and a lack of integration between different components of the gym\u2019s operations. Additionally, members often struggle to navigate these processes and experience a lack of real-time information about available machines, payment statuses, or membership plans.</p>"},{"location":"documentation/introduction/#the-solution","title":"The Solution","text":"<p>Our gym management platform (The FIT Monitor) solves these issues by integrating key functionalities into a unified system. With features like QR code scanning for machine check-ins, real-time machine occupancy tracking, and automated membership payment processing, this platform streamlines the operations of gyms, providing both administrators and members with an intuitive and seamless experience.</p>"},{"location":"documentation/introduction/#the-goal-of-the-project","title":"The Goal of the Project","text":"<p>The goal of this project is to create a user-friendly and efficient app that supports gym administrators in managing memberships and equipment, while also offering gym members a smooth and modern experience in interacting with gym services. The platform aims to:</p> <ol> <li>Simplify the membership process by enabling users to choose and pay for membership plans.</li> <li>Enhance the check-in experience with QR code scanning and machine tracking, allowing members to check the availability of gym equipment in real time.</li> <li>Provide real-time occupancy information so that both members and administrators can see how many people are currently at the gym.</li> <li>Restrict gym access to only members with active subscriptions, ensuring security and a better overall gym environment.</li> </ol> <p>In summary, the platform is designed to address the inefficiencies in gym management, making it easier for both gym staff and members to navigate the gym environment, while also improving operational processes through automation and real-time data.</p>"},{"location":"documentation/introduction/#business-model-canvas","title":"Business Model Canvas","text":"<p>The Business Model Canvas is a strategic management tool that provides a visual framework for developing, describing, and analyzing a business model. It consists of nine key building blocks that outline the fundamental aspects of a business, including:</p> <ol> <li>Customer Segments: Defines the different groups of people or organizations a business aims to serve.</li> <li>Value Propositions: Describes the unique value that a business offers to its customers, addressing their needs and problems.</li> <li>Channels: Outlines how the company delivers its value propositions to customers, including communication and distribution channels.</li> <li>Customer Relationships: Details the types of relationships a business establishes with its customer segments to retain them.</li> <li>Revenue Streams: Identifies how the company generates income from its value propositions, including pricing mechanisms and revenue sources.</li> <li>Key Resources: Lists the critical assets and resources required to deliver the value proposition, serve customer segments, and maintain relationships.</li> <li>Key Activities: Describes the essential activities and processes a business must undertake to operate successfully and deliver its value proposition.</li> <li>Key Partnerships: Identifies the external organizations and suppliers that help the business achieve its objectives and create value.</li> <li>Cost Structure: Outlines the major costs involved in operating the business and delivering its value propositions.</li> </ol> <p></p>"},{"location":"documentation/tech-stack/","title":"Tech Stack","text":"<p>Throughout the development of our gym management platform, we leveraged a variety of modern technologies to ensure efficiency, scalability, and a seamless user experience. Here is an overview of the tools and frameworks that were integral to the project:  </p> <p>The frontend of the application was built using Angular, a powerful framework that allowed us to create an interactive and responsive user interface. For the backend, we utilized Spring Boot to develop robust and scalable RESTful APIs that served as the backbone of our application.  </p> <p>To facilitate communication between microservices, we implemented Apache Kafka, ensuring reliable message exchange in a distributed environment. Additionally, AWS was chosen for the deployment of the application, providing a scalable and secure infrastructure to host the platform.  </p> <p>To simulate secure and seamless payment processing, we integrated Stripe, enabling members to handle membership payments with ease. Swagger was employed to document our APIs, making them easily accessible and testable for both developers and stakeholders.  </p> <p>The project was managed and organized using Jira, where tasks, user stories, and sprints were tracked efficiently. For version control, GitHub was utilized, allowing collaborative development and providing a central repository for the entire codebase.  </p> <p>For communication within the team, we relied on Discord, a flexible platform that supported remote discussions, progress updates, and troubleshooting throughout the project lifecycle.  </p> Angular Spring Boot AWS Kafka Jira GitHub Stripe Swagger Discord"},{"location":"sprints/sprint/","title":"Sprint","text":"<p>To organize the tasks and ensure alignment, sprints were created, along with weekly (Sunday) meetings with the group to decide together what needed to be done and how the tasks would be distributed among the team members. Sprint reviews with the Software Engineering professors take place biweekly on Mondays, where the sprint's progress and outcomes are reviewed.</p> <p>For each sprint review, the following elements are addressed:</p> <ul> <li>Sprint Goal: The objective of the sprint.</li> <li>Responsible Team: Including the Product Owner, Scrum Master, and Developers.</li> <li>User Stories: The specific user stories being developed.</li> <li>Sprint Retrospective: A review of what went well, what could be improved, and how to enhance efficiency in the next sprint.</li> <li>Sprint Burndown Chart: A graphical representation of the remaining work versus time. It helps track the team's progress and predict whether the sprint goal will be achieved within the allotted time.</li> </ul>"},{"location":"sprints/sprint/#sprint-1-07102024-13102024","title":"Sprint 1 - 07/10/2024 - 13/10/2024","text":"<p>Sprint Goal</p> <p>For the first sprint, the primary focus was to establish the foundational elements required for the project following the change in theme. This included:</p> <ol> <li> <p>Business Model Canvas: As the project theme was changed, it was necessary to create a new Business Model Canvas to align the business strategy with the development plan.</p> </li> <li> <p>Definition of Ready and Done: Establishing clear definitions for \"Ready\" and \"Done\" to ensure all user stories meet specific criteria before entering and exiting the sprint workflow.</p> </li> <li> <p>Story Point Table: Creating a points table to assign values to user stories, enabling better estimation and tracking of workload.</p> </li> <li> <p>Initial Website Prototype: Developing a very basic homepage for the website, serving as a prototype for future design and functionality improvements.</p> </li> <li> <p>AWS Cognito Integration: Implementing AWS Cognito for user authentication and login functionalities, laying the groundwork for secure access to the platform.</p> </li> </ol> <p>Responsible Team</p> <ul> <li>Scrum Master: Miguel Cruzeiro</li> <li>Product Owner: Miguel Vieira</li> <li>Developers: Diogo Pinto &amp; Diogo Silva</li> </ul> <p>User Stories</p> User Stories Description Storie Points FIT-3 LogIn with Email 8 FIT-9 Register with Email 5 <p>Sprint Retrospective</p> <p>Despite the short duration of this first sprint, we did not anticipate delivering a large number of features. However, we successfully completed all the tasks we had planned, including all user stories related to the user authentication epic: Log In with Email and Register with Email.</p> <p>Sprint Burndown Chart </p>"},{"location":"sprints/sprint/#sprint-2-14102024-27102024","title":"Sprint 2 - 14/10/2024 - 27/10/2024","text":"<p>Sprint Goal</p> <p>For the second sprint, the focus was on developing essential features that enhance user interaction and management within the gym platform. These features aim to improve both the administrative functionality and the user experience. The main tasks included:</p> <ol> <li> <p>Machine Management: Implementing a feature that allows gym administrators to add and manage machines available in the gym. This ensures users have updated information on the machines accessible to them.</p> </li> <li> <p>Homepage Redirection: Creating a functionality to redirect users to their personalized homepage upon login, where they can quickly access relevant information about their gym, enhancing the user experience by simplifying navigation.</p> </li> <li> <p>User Access Control: Adding a user management system, enabling administrators to control access permissions for various users. This ensures that only registered users have the appropriate access rights to the platform's features.</p> </li> <li> <p>Real-Time Gym Capacity Check: Developing a section where gym members can view the gym's current capacity. This provides users with the convenience of planning their gym visits based on occupancy, ensuring a better experience.</p> </li> </ol> <p>These implementations lay the groundwork for a more interactive and user-centric platform, allowing both administrators and members to efficiently manage and utilize gym resources.</p> <p>Responsible Team</p> <ul> <li>Scrum Master: Diogo Silva</li> <li>Product Owner: Diogo Pinto</li> <li>Developers: Miguel Cruzeiro &amp; Miguel Vieira</li> </ul> <p>User Stories</p> User Stories Description Story Points FIT-25 Add Machines 3 FIT-12 Home-Page Redirect 5 FIT-20 Add User Management 8 FIT-26 See Gym Capacity 5 <p>Sprint Retrospective</p> <p>In this second sprint, we made significant progress in developing key functionalities, primarily focusing on user management and interaction within the platform. We successfully completed the Add Machines and Home-Page Redirect user stories, both of which were implemented and thoroughly tested.</p> <p>However, some functionalities, such as Add User Management and See Gym Capacity, remain partially completed. In the Add User Management story, several components were implemented, but the story was not fully finalized. For See Gym Capacity, the implementation was also left incomplete, as essential testing and the connection between the backend and frontend were not fully achieved.</p> <p>An additional factor contributing to these unfinished tasks has been communication challenges within the development team over the course of these first two sprints. Due to these issues, some development efforts were misdirected to tasks not originally planned for this sprint, impacting the team\u2019s ability to complete the intended work.</p> <p>To address these challenges and streamline development, we plan to improve organization and clarity within our Jira board. Specifically, we aim to make the details of each user story and task as explicit as possible to ensure all team members have a clear understanding of the scope and priorities.</p> <p>In the next sprint, we will prioritize the pending tasks to ensure they are fully tested, integrated, and aligned with the planned objectives.</p> <p>Sprint Burndown Chart </p>"},{"location":"sprints/sprint/#sprint-3-28102024-10112024","title":"Sprint 3 - 28/10/2024 - 10/11/2024","text":"<p>Sprint Goal</p> <p>In this sprint, our objective is to improve the overall user experience by conducting research and developing strategies for essential functionalities related to workout management and user access control. Our primary focus will be on:</p> <ol> <li> <p>Researching QR Code Features: This includes investigating the best practices and technologies for QR code scanning and generation, as well as how to handle error scenarios effectively, to ensure a seamless user experience when accessing the gym.</p> </li> <li> <p>Adding New Exercises: We will enable users to add exercises to their workout plans, allowing them to track their training routines more effectively. This will involve creating an interface where users can input exercise details such as name, repetitions, sets, and weight.</p> </li> <li> <p>Completing User Management Functionality: Addressing the task from the previous sprint, we will implement user management features that allow administrators to manage user permissions effectively. This is a \"carryover\" task aimed at ensuring that only authorized users have access to the gym account.</p> </li> <li> <p>Deploying in AWS Services: We will research and set up the necessary infrastructure for deploying our application using AWS services, ensuring scalability and reliability for our user base.</p> </li> </ol> <p>Successfully executing these tasks will enable us to establish a robust foundation for advanced features, enhance user interaction, and ensure secure access for all members while preparing the application for deployment in the cloud.</p> <p>Responsible Team</p> <ul> <li>Scrum Master: Miguel Vieira</li> <li>Product Owner: Diogo Silva</li> <li>Developers: Miguel Cruzeiro &amp; Diogo Pinto</li> </ul> <p>User Stories</p> User Stories Description Story Points FIT-20 Add User Management 8 FIT-24 Add new Exercices 5 <p>Principal Tasks</p> Tasks Description Type FIT-46 Deploy in AWS Services Cloud FIT-47 QR Code Implementation Research Research <p>Sprint Retrospective</p> <p>In this third sprint, we made steady progress in several areas, with a focus on user management and exercise functionalities  within the platform. The \u201cAdd User Management\u201d user story, which had been carried over from the previous sprint, was successfully completed. Additionally, we made progress on the \u201cAdd New Exercises\u201d story, implementing the main functionality required to add  exercises to the system. However, this story remains incomplete according to our Definition of Done, as the required testing has  not yet been performed.</p> <p>We also conducted two research tasks: deployment on AWS services and QR Code implementation. The QR Code research was fully completed, providing the foundational knowledge needed for future integration. For AWS deployment, we established an initial architecture,  but there are still some open questions that require clarification from our professors before we can finalize the design to better  fit our requirements.</p> <p>Although we did not achieve 100% of what we had initially planned, this sprint marked improvements in team communication and  organization. Task delegation was clearer, and progress was monitored more effectively, allowing us to address blockers earlier. Looking ahead, the team has outlined the necessary work for the next sprint, setting clear priorities and defining the research areas  that need further exploration. With these steps, we are aiming to increase focus and ensure successful completion of ongoing and  upcoming tasks.</p> <p>Sprint Burndown Chart </p>"},{"location":"sprints/sprint/#sprint-4-11112024-24112024","title":"Sprint 4 - 11/11/2024 - 24/11/2024","text":"<p>Sprint Goal</p> <p>In this sprint, our goal is to enhance gym member access, app functionality, and reliability by implementing secure QR code features and deploying the app in a robust cloud environment. The main focus will be:</p> <ol> <li> <p>Member Access QR Code Generation: Upon registration, each gym member will receive a unique QR code, accessible directly in the app, to facilitate entry into the gym. This will improve access control and simplify member check-in.</p> </li> <li> <p>Gym Entrance QR Code Scanning: Members will be able to scan their unique QR code at the gym entrance, allowing for a seamless and secure check-in experience. If the code fails to scan, the system will prompt the member to retry, ensuring smooth entry for all users.</p> </li> <li> <p>AWS Deployment: Deploying the application on AWS will allow for consistent performance and high availability, ensuring members have reliable access to their data and a seamless experience across all features.</p> </li> <li> <p>Log-Out Feature: Adding a log-out option will provide members with the ability to switch accounts securely within the app.</p> </li> </ol> <p>Completing these objectives will enhance entry processes, improve security, and provide members with a reliable, high-performance application that supports their needs efficiently.</p> <p>Responsible Team</p> <ul> <li>Scrum Master: Diogo Pinto</li> <li>Product Owner: Miguel Cruzeiro</li> <li>Developers: Miguel Vieira &amp; Diogo Silva</li> </ul> <p>User Stories</p> User Stories Description Story Points FIT-24 Add new Exercices 5 FIT-42 QR Code Scanning at Gym Entrance 5 FIT-21 QR Code Generation for Members 3 FIT-59 AWS Deployment 8 FIT-58 Log Out 1 <p>Principal Tasks</p> Tasks Description Type FIT-46 Deploy in AWS Services Cloud <p>Sprint Retrospective</p> <p>In this sprint, the progress achieved was limited due to competing priorities from assignments and deliverables in other courses.  As a result, only the \u201cLog Out\u201d user story was fully completed and met the team\u2019s Definition of Done.  This feature now allows users to securely log out and switch accounts seamlessly.</p> <p>The \u201cAWS Deployment\u201d task also saw some advancement, with foundational work on deploying the application in the cloud.  However, this task remains incomplete according to the Definition of Done, as further refinement and clarification are required to  align the architecture with project requirements.</p> <p>Unfortunately, the remaining user stories \u2014 \u201cAdd New Exercises\u201d \u201cQR Code Scanning at Gym Entrance\u201d and  \u201cQR Code Generation for Members\u201d \u2014 were not addressed in this sprint. These will carry over to the next sprint for prioritization.</p> <p>Despite the reduced output during this sprint, the team remains committed to addressing these outstanding tasks and has already  planned the work for the upcoming sprint. Additionally, the planned Sprint Review session with professors has been rescheduled to  December 9th, giving the team additional time to deliver more comprehensive results for feedback.</p> <p>Moving forward, the focus will be on balancing academic commitments and project tasks to ensure steady progress while  adhering to project deadlines.</p> <p>Sprint Burndown Chart </p>"},{"location":"sprints/sprint/#sprint-5-25112024-08122024","title":"Sprint 5 - 25/11/2024 - 08/12/2024","text":"<p>Sprint Goal</p> <p>In this sprint, our primary objective is to complete the work carried over from the previous sprint, focusing on enhancing gym member access, app functionality, and cloud reliability. The main priorities will be:</p> <ol> <li> <p>Member Access QR Code Generation: Finalizing the feature that provides each gym member with a unique QR code upon registration. This QR code will be accessible within the app and streamline access control by simplifying member check-ins.</p> </li> <li> <p>Gym Entrance QR Code Scanning: Implementing and testing the functionality that allows members to scan their unique QR code at the gym entrance for a seamless and secure check-in process. Ensuring the system handles errors effectively if a scan fails.</p> </li> <li> <p>AWS Deployment: Completing the deployment of the application on AWS, establishing a robust cloud environment for consistent performance and high availability. This will ensure a reliable and scalable user experience across all app features.</p> </li> </ol> <p>By focusing on these critical areas, the team aims to finalize the foundational features for member access and secure the application\u2019s infrastructure to enhance reliability, usability, and overall performance.</p> <p>Responsible Team</p> <ul> <li>Scrum Master: Diogo Pinto</li> <li>Product Owner: Miguel Cruzeiro</li> <li>Developers: Miguel Vieira &amp; Diogo Silva</li> </ul> <p>User Stories</p> User Stories Description Story Points FIT-24 Add new Exercices 5 FIT-42 QR Code Scanning at Gym Entrance 5 FIT-21 QR Code Generation for Members 3 FIT-59 AWS Deployment 8 <p>Principal Tasks</p> Tasks Description Type FIT-46 Deploy in AWS Services Cloud <p>Sprint Retrospective</p> <p>In this sprint, we were unable to implement any of the planned features due to the significant workload from other academic disciplines and the Intermediate  Assessment Period (IAP) for Software Engineering. As a result, all the user stories and tasks scheduled for this sprint will be carried over to the next sprint.  The team\u2019s primary goal moving forward is to finalize these items and begin tackling the subsequent planned features.</p> <p>The carried-over work includes:</p> <ol> <li>FIT-24: Add new Exercices </li> <li>FIT-42: QR Code Scanning at Gym Entrance </li> <li>FIT-21: QR Code Generation for Members </li> <li>FIT-59: AWS Deployment </li> <li>FIT-46: Deploy in AWS Services </li> </ol> <p>This sprint also presented a significant challenge as one of the team members left the project.  Consequently, we had to reassess and adjust the final project scope. Some planned functionalities will not be developed to accommodate the reduced team capacity.</p> <p>It\u2019s worth noting that progress on the project has been minimal over the past three weeks due to these challenges.  However, the team is committed to reversing this trend. In the upcoming weeks, we aim to accelerate development and regain momentum to ensure  steady progress toward completing the project.</p> <p>Despite the setbacks, we remain focused on delivering the most essential features and achieving the project\u2019s key objectives.</p> <p>Sprint Burndown Chart </p>"},{"location":"sprints/sprint/#sprint-6-08122024-22122024","title":"Sprint 6 - 08/12/2024 - 22/12/2024","text":"<p>Sprint Goal </p> <p>In this sprint, our primary objective is to complete the work carried over from Sprint 5. This includes finalizing the implementation of key features for gym member access, such as QR code functionalities, and completing the AWS deployment to ensure a reliable and scalable application infrastructure.</p> <p>By focusing on these pending tasks, we aim to meet the goals originally set for the previous sprint and establish a solid foundation for future development.</p> <p>Responsible Team</p> <ul> <li>Scrum Master: Diogo Silva</li> <li>Product Owner: Diogo Pinto</li> <li>Developers: Miguel Cruzeiro</li> </ul> <p>User Stories</p> User Stories Description Story Points FIT-24 Add new Exercices 5 FIT-42 QR Code Scanning at Gym Entrance 5 FIT-21 QR Code Generation for Members 3 FIT-59 AWS Deployment 8 <p>Principal Tasks</p> Tasks Description Type FIT-46 Deploy in AWS Services Cloud <p>Sprint Retrospective</p> <p>In this sprint, we faced significant challenges in progressing with the planned work due to the end of classes and the  heavy workload from other project submissions. As a result, none of the planned user stories or tasks were completed. </p> <p>Despite this, we conducted a sprint review and realigned our approach for the remaining project timeline.  Considering that the final delivery is due on January 9th, we have decided to make significant adjustments to our workflow:</p> <ol> <li> <p>Focus on Outstanding Work: Moving forward, our priority will be to complete all the pending user stories and tasks  from the previous sprints. The team will fully dedicate efforts to ensure that these features and functionalities  are delivered on time and meet the project\u2019s requirements.</p> </li> <li> <p>Shorter Sprints: To better manage the workload and maintain tighter control over deliverables, we will shift from  two-week sprints to one-week sprints. This change will allow us to monitor progress more closely and adapt quickly  to any challenges that arise.</p> </li> </ol> <p>While this sprint did not yield tangible progress in terms of deliverables, we are committed to turning the situation  around in the upcoming sprints. The team has realigned its focus, and with the adjusted sprint structure, we are confident  in our ability to meet the project goals and deadlines effectively.</p> <p>Sprint Burndown Chart </p>"},{"location":"sprints/sprint/#sprint-7-23122024-29122024","title":"Sprint 7 - 23/12/2024 - 29/12/2024","text":"<p>Sprint Goal </p> <p>In this sprint, our primary objective is to complete the work carried over from Sprint 6. This includes finalizing the implementation of key features for gym member access, such as QR code functionalities, and completing the AWS deployment to ensure a reliable and scalable application infrastructure.</p> <p>By focusing on these pending tasks, we aim to meet the goals originally set for the previous sprint and establish a solid foundation for future development.</p> <p>Responsible Team</p> <ul> <li>Scrum Master: Miguel Cruzeiro</li> <li>Product Owner: Diogo Silva</li> <li>Developers: Diogo Pinto</li> </ul> <p>User Stories</p> User Stories Description Story Points FIT-24 Add new Exercices 5 FIT-42 QR Code Scanning at Gym Entrance 5 FIT-21 QR Code Generation for Members 3 FIT-59 AWS Deployment 8 <p>Principal Tasks</p> Tasks Description Type FIT-46 Deploy in AWS Services Cloud <p>Sprint Retrospective</p> <p>In Sprint 7, we made significant progress by completing most of the planned user stories, but some adjustments had to be made to the project scope due to unforeseen circumstances. Below is an overview of our accomplishments and challenges:</p> <p>Completed User Stories</p> <p>FIT-42: QR Code Scanning at Gym Entrance: This functionality was successfully implemented and met our Definition of Done (DoD). Gym members can now use the QR code scanning feature for seamless entry.</p> <p>FIT-21: QR Code Generation for Members: The system now generates unique QR codes for each member upon registration, providing an improved and secure gym access experience.</p> <p>AWS Deployment Preparations</p> <p>Although FIT-59: AWS Deployment has not been completed, we successfully finalized the associated task FIT-46: Deploy in AWS Services. The architecture for cloud deployment is now fully designed, and the necessary AWS services have been identified. The actual deployment will be carried out in the final week once the MVP is fully developed.</p> <p>Challenges and Adjustments</p> <p>FIT-24: Add New Exercises was not implemented. This feature was originally assigned to a team member who left the project. After evaluating its relevance to the MVP, the team decided it will no longer be part of the development scope.</p> <p>FIT-59: AWS Deployment will be deferred to the final sprint. This decision was made to prioritize completing and refining the MVP before focusing on deployment.</p> <p>Sprint Burndown Chart </p>"},{"location":"sprints/sprint/#sprint-8-30122024-05012025","title":"Sprint 8 - 30/12/2024 - 05/01/2025","text":"<p>Sprint Goal </p> <p>In this sprint, our primary objective is to finalize all functionalities related to QR codes, ensuring seamless integration and usability across the gym platform. This includes completing tasks such as QR code generation for gym machines, scanning for machine check-ins, and viewing machine occupancy in real time.</p> <p>After completing all tasks related to QR codes, we will advance to the user stories focused on payment functionalities, laying the groundwork for secure and efficient membership payment processing.</p> <p>By the end of the sprint, we aim to have the MVP (Minimum Viable Product) fully ready, covering all core features required for a functional and efficient gym management system. This will set the stage for the final sprint, where the focus will be exclusively on deployment in AWS Services.</p> <p>With this plan, the team is committed to delivering a product that meets the project requirements and prepares us for the final steps of the development process.</p> <p>Responsible Team</p> <ul> <li>Scrum Master: Diogo Pinto</li> <li>Product Owner: Miguel Cruzeiro</li> <li>Developers: Diogo Silva</li> </ul> <p>User Stories </p> User Stories Description Story Points FIT-61 QR Code Generation for Gym Machines 5 FIT-62 Upload Images for Gym Machines 3 FIT-51 View Occupied Machine Status in Real-Time 8 FIT-34 QR Code Scanning for Machine Check-In 5 FIT-36 Enable Gym Members to Choose a Membership Plan 3 FIT-64 Generate Payment Invoices for Members 5 FIT-65 Process Gym Membership Payments 8 FIT-66 Restrict Gym Access Without Paid Membership 3 <p>Principal Tasks </p> Tasks Description Type FIT-35 PWA Integration Integration <p>Sprint Retrospective</p> <p>This sprint marked a significant milestone in our project as we focused on completing the key functionalities required for the MVP. We are pleased to report that almost all planned user stories were successfully implemented.</p> <p>Unfortunately, the user story related to generating payment invoices for members (FIT-64) was not completed during this sprint. However, after careful consideration, we decided it will not be included in the MVP since our immediate priority is to finalize the deployment process.</p> <p>This sprint stands out as the most productive in the project. Despite the team now being reduced to three members from the original four, we successfully delivered 25 out of the 30 planned story points within a single week. The progress throughout the sprint was consistent and well-organized, as shown by the burndown chart, which reflects a steady workflow. This is a significant improvement from previous sprints where early momentum was often hindered by workload delays.</p> <p>With the MVP now complete, we are prepared to focus solely on deploying the platform on AWS during the final sprint. The team is highly motivated to deliver a production-ready system by the project deadline on January 9th. This sprint has been a testament to the team\u2019s ability to adapt, stay organized, and achieve goals efficiently, making it the most successful sprint in the project\u2019s lifecycle.</p> <p>Sprint Burndown Chart </p>"},{"location":"sprints/sprint/#sprint-9-06012025-09012025","title":"Sprint 9 - 06/01/2025 - 09/01/2025","text":"<p>Sprint Goal </p> <p>In this final sprint, our sole objective is to successfully deploy the gym management platform on AWS, ensuring it is fully functional. As the necessary research and planning for the deployment architecture were completed in previous sprints, this sprint will focus entirely on executing the deployment and configuring the required AWS services.</p> <p>This sprint will be shorter than usual, concluding on January 9th, to align with the project presentation. Our goal is to deliver a polished, deployed product that meets all requirements and demonstrates the hard work and dedication of the team throughout the project.</p> <p>User Stories</p> User Stories Description Story Points FIT-59 AWS Deployment 8 <p>Principal Tasks </p> Tasks Description Type FIT-68 API Documentation with Swagger Documentation FIT-67 Frontend Route Protection Programming FIT-69 Payment Status Page Redirects Programming <p>Sprint Retrospective</p> <p>In this final sprint, our main goal was to successfully deploy the gym management platform on AWS and ensure it was fully functional. With all the necessary research and planning for the deployment architecture completed in previous sprints, the team focused entirely on the execution phase. This sprint was intentionally shorter, concluding on January 9th to align with the project presentation deadline.</p> <p>We are pleased to report that all planned tasks for the sprint were successfully completed, and the project is now in its final, polished state. The deployment on AWS was executed flawlessly, with all required services configured to ensure the platform's functionality, scalability, and security.</p> <p>In addition to the deployment, the team completed several key development and documentation tasks. The API documentation with Swagger was finalized, providing a clear and comprehensive reference for developers and stakeholders. We also implemented frontend route protection, ensuring that sensitive areas of the platform are secure and accessible only to authorized users. Finally, the payment status page redirects were configured, streamlining the user experience for payment-related activities.</p> <p>The successful completion of this sprint marks the delivery of a Minimum Viable Product (MVP) that meets all project requirements. The gym management platform is now ready for presentation, showcasing a fully deployed and functional system hosted on AWS. The deployment demonstrates the team's ability to integrate modern technologies and deliver a solution that is both robust and user-friendly.</p> <p>Sprint Burndown Chart </p>"}]}